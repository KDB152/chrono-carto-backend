// Script de test pour v√©rifier la restriction d'acc√®s aux quizzes
const API_BASE = 'http://localhost:3001';

async function testQuizRestriction() {
  console.log('üîí Test de la restriction d\'acc√®s aux quizzes...\n');

  try {
    // 1. Cr√©er un quiz avec des groupes cibles sp√©cifiques
    console.log('1Ô∏è‚É£ Cr√©ation d\'un quiz restreint...');
    const createResponse = await fetch(`${API_BASE}/quizzes`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        title: 'Quiz Restreint - Terminale Groupe 1 UNIQUEMENT',
        description: 'Ce quiz ne peut √™tre tent√© QUE par Terminale Groupe 1',
        subject: 'Test',
        level: 'Terminale',
        duration: 30,
        pass_score: 10,
        status: 'Publi√©',
        tags: ['test', 'restriction'],
        is_time_limited: true,
        allow_retake: false,
        show_results: true,
        randomize_questions: false,
        target_groups: ['Terminale groupe 1'] // SEUL ce groupe peut tenter
      })
    });

    if (!createResponse.ok) {
      throw new Error(`Erreur cr√©ation: ${createResponse.status} ${createResponse.statusText}`);
    }

    const createdQuiz = await createResponse.json();
    console.log('‚úÖ Quiz cr√©√©:', createdQuiz.title);
    console.log('üìä Groupes cibles:', createdQuiz.target_groups);
    console.log('');

    // 2. Tester la soumission d'une tentative par un √©tudiant autoris√©
    console.log('2Ô∏è‚É£ Test: √âtudiant AUTORIS√â (Terminale groupe 1)...');
    try {
      const attemptResponse = await fetch(`${API_BASE}/quizzes/attempts`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          quiz_id: createdQuiz.id,
          student_id: 1, // Supposons que l'√©tudiant 1 est Terminale groupe 1
          student_name: '√âtudiant Autoris√©',
          score: 15,
          total_points: 20,
          percentage: 75,
          time_spent: 25
        })
      });

      if (attemptResponse.ok) {
        console.log('‚úÖ SUCC√àS: L\'√©tudiant autoris√© peut tenter le quiz');
      } else {
        const error = await attemptResponse.json();
        console.log('‚ùå √âCHEC: L\'√©tudiant autoris√© ne peut pas tenter le quiz');
        console.log('   Erreur:', error.message);
      }
    } catch (error) {
      console.log('‚ùå Erreur lors de la tentative autoris√©e:', error.message);
    }

    console.log('');

    // 3. Tester la soumission d'une tentative par un √©tudiant NON autoris√©
    console.log('3Ô∏è‚É£ Test: √âtudiant NON AUTORIS√â (Terminale groupe 2)...');
    try {
      const attemptResponse = await fetch(`${API_BASE}/quizzes/attempts`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          quiz_id: createdQuiz.id,
          student_id: 2, // Supposons que l'√©tudiant 2 est Terminale groupe 2
          student_name: '√âtudiant Non Autoris√©',
          score: 18,
          total_points: 20,
          percentage: 90,
          time_spent: 30
        })
      });

      if (attemptResponse.ok) {
        console.log('‚ùå PROBL√àME: L\'√©tudiant non autoris√© peut tenter le quiz !');
        console.log('   La restriction ne fonctionne pas correctement.');
      } else {
        const error = await attemptResponse.json();
        console.log('‚úÖ SUCC√àS: L\'√©tudiant non autoris√© est bloqu√©');
        console.log('   Message d\'erreur:', error.message);
      }
    } catch (error) {
      console.log('‚úÖ SUCC√àS: L\'√©tudiant non autoris√© est bloqu√© (exception)');
      console.log('   Erreur:', error.message);
    }

    console.log('');

    // 4. V√©rifier les statistiques d'acc√®s
    console.log('4Ô∏è‚É£ V√©rification des statistiques d\'acc√®s...');
    try {
      const statsResponse = await fetch(`${API_BASE}/quizzes/${createdQuiz.id}/access-stats`);
      if (statsResponse.ok) {
        const stats = await statsResponse.json();
        console.log('üìä Statistiques d\'acc√®s:');
        console.log('   - Total √©tudiants:', stats.totalStudents);
        console.log('   - √âtudiants ayant acc√®s:', stats.accessibleStudents);
        console.log('   - Groupes cibles:', stats.accessibleGroups);
      } else {
        console.log('‚ùå Impossible de r√©cup√©rer les statistiques');
      }
    } catch (error) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error.message);
    }

    // 5. Nettoyer
    console.log('\n5Ô∏è‚É£ Nettoyage...');
    await fetch(`${API_BASE}/quizzes/${createdQuiz.id}`, { method: 'DELETE' });
    console.log('üóëÔ∏è Quiz de test supprim√©');

    console.log('\nüéØ R√©sum√© du test de restriction:');
    console.log('   ‚úÖ Quiz cr√©√© avec groupes cibles restreints');
    console.log('   ‚úÖ V√©rification de l\'acc√®s autoris√©');
    console.log('   ‚úÖ V√©rification du blocage des acc√®s non autoris√©s');
    console.log('   ‚úÖ Statistiques d\'acc√®s r√©cup√©r√©es');

  } catch (error) {
    console.error('‚ùå Erreur lors du test de restriction:', error);
  }
}

// Ex√©cuter le test
testQuizRestriction();
