// Script pour v√©rifier la table quiz_attempts et les tentatives
const API_BASE = 'http://localhost:3001';

async function verifierQuizAttempts() {
  console.log('üîç V√©rification de la table quiz_attempts...\n');

  try {
    // 1. V√©rifier la structure de la table via l'API
    console.log('1Ô∏è‚É£ V√©rification de la structure...');
    
    // R√©cup√©rer tous les quizzes pour avoir un ID valide
    const quizzesResponse = await fetch(`${API_BASE}/quizzes`);
    if (!quizzesResponse.ok) {
      throw new Error('Impossible de r√©cup√©rer les quizzes');
    }
    
    const quizzesData = await quizzesResponse.json();
    const quizzes = quizzesData.items || [];
    
    if (quizzes.length === 0) {
      console.log('‚ùå Aucun quiz trouv√© pour tester');
      return;
    }
    
    const testQuiz = quizzes[0];
    console.log(`‚úÖ Quiz de test: "${testQuiz.title}" (ID: ${testQuiz.id})`);
    console.log(`   - target_groups: ${JSON.stringify(testQuiz.target_groups)}`);
    
    // 2. V√©rifier les tentatives existantes
    console.log('\n2Ô∏è‚É£ V√©rification des tentatives existantes...');
    
    const attemptsResponse = await fetch(`${API_BASE}/quizzes/${testQuiz.id}/attempts`);
    if (attemptsResponse.ok) {
      const attempts = await attemptsResponse.json();
      console.log(`üìä Tentatives existantes pour ce quiz: ${attempts.length}`);
      
      if (attempts.length > 0) {
        attempts.forEach((attempt, index) => {
          console.log(`\n   Tentative ${index + 1}:`);
          console.log('   - ID:', attempt.id);
          console.log('   - Student ID:', attempt.student_id);
          console.log('   - Score:', attempt.score);
          console.log('   - Date:', attempt.created_at);
        });
      }
    } else {
      console.log('‚ö†Ô∏è  Impossible de r√©cup√©rer les tentatives existantes');
    }
    
    // 3. Tester la cr√©ation d'une tentative
    console.log('\n3Ô∏è‚É£ Test de cr√©ation d\'une tentative...');
    
    const testAttempt = {
      quiz_id: testQuiz.id,
      student_id: 68, // Mayssa El Abed - Terminale groupe 3 (AUTORIS√â)
      student_name: 'Mayssa El Abed',
      score: 15,
      total_points: 20,
      percentage: 75,
      time_spent: 25,
      answers: {
        question_1: { answer: 'A', is_correct: true },
        question_2: { answer: 'B', is_correct: false }
      }
    };
    
    console.log('üìù Donn√©es de la tentative √† cr√©er:');
    console.log('   - quiz_id:', testAttempt.quiz_id);
    console.log('   - student_id:', testAttempt.student_id);
    console.log('   - score:', testAttempt.score);
    
    const createAttemptResponse = await fetch(`${API_BASE}/quizzes/attempts`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testAttempt)
    });
    
    console.log('\nüì° R√©ponse de l\'API:');
    console.log('   - Status:', createAttemptResponse.status);
    console.log('   - OK:', createAttemptResponse.ok);
    
    if (createAttemptResponse.ok) {
      const createdAttempt = await createAttemptResponse.json();
      console.log('‚úÖ Tentative cr√©√©e avec succ√®s!');
      console.log('   - ID:', createdAttempt.id);
      console.log('   - Quiz ID:', createdAttempt.quiz_id);
      console.log('   - Student ID:', createdAttempt.student_id);
      console.log('   - Score:', createdAttempt.score);
      
      // 4. V√©rifier que la tentative est bien sauvegard√©e
      console.log('\n4Ô∏è‚É£ V√©rification de la sauvegarde...');
      
      const verifyResponse = await fetch(`${API_BASE}/quizzes/${testQuiz.id}/attempts`);
      if (verifyResponse.ok) {
        const updatedAttempts = await verifyResponse.json();
        console.log(`üìä Tentatives apr√®s cr√©ation: ${updatedAttempts.length}`);
        
        const newAttempt = updatedAttempts.find(a => a.id === createdAttempt.id);
        if (newAttempt) {
          console.log('‚úÖ Tentative trouv√©e dans la base!');
          console.log('   - Sauvegarde confirm√©e');
        } else {
          console.log('‚ùå Tentative NON trouv√©e dans la base!');
          console.log('   - Probl√®me de sauvegarde');
        }
      }
      
      // 5. Nettoyer - Supprimer la tentative de test
      console.log('\n5Ô∏è‚É£ Nettoyage...');
      try {
        const deleteResponse = await fetch(`${API_BASE}/quizzes/attempts/${createdAttempt.id}`, {
          method: 'DELETE'
        });
        if (deleteResponse.ok) {
          console.log('üóëÔ∏è Tentative de test supprim√©e');
        } else {
          console.log('‚ö†Ô∏è  Impossible de supprimer la tentative de test');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è  Erreur lors de la suppression:', error.message);
      }
      
    } else {
      const errorText = await createAttemptResponse.text();
      console.log('‚ùå Erreur lors de la cr√©ation de la tentative:');
      console.log('   - Erreur:', errorText);
      
      // Analyser l'erreur
      try {
        const errorData = JSON.parse(errorText);
        console.log('   - D√©tails:', JSON.stringify(errorData, null, 2));
      } catch (e) {
        console.log('   - Erreur brute:', errorText);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

verifierQuizAttempts();
