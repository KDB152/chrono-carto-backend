const mysql = require('mysql2');

// Connexion √† la base de donn√©es
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '', // Ajoutez votre mot de passe si n√©cessaire
  database: 'chrono_carto'
});

console.log('üîç Connexion √† la base de donn√©es...');

connection.connect((err) => {
  if (err) {
    console.error('‚ùå Erreur de connexion:', err.message);
    return;
  }
  
  console.log('‚úÖ Connexion √©tablie');
  
  // 1. V√©rifier l'√©tat actuel des r√©ponses
  console.log('\nüîç √âtat actuel des r√©ponses dans quiz_attempts:');
  connection.query('SELECT id, answers FROM quiz_attempts', (err, attempts) => {
    if (err) {
      console.error('‚ùå Erreur SELECT:', err.message);
      return;
    }
    
    attempts.forEach(attempt => {
      console.log(`\n  Tentative ID ${attempt.id}:`);
      console.log(`    R√©ponses brutes: "${attempt.answers}"`);
      
      if (attempt.answers) {
        try {
          const parsed = JSON.parse(attempt.answers);
          console.log(`    ‚úÖ JSON valide:`, parsed);
        } catch (error) {
          console.log(`    ‚ùå JSON invalide: ${error.message}`);
        }
      } else {
        console.log(`    ‚ö™ Pas de r√©ponses`);
      }
    });
    
    // 2. Corriger le format JSON des r√©ponses
    console.log('\nüõ†Ô∏è Correction du format JSON...');
    
    attempts.forEach(attempt => {
      if (attempt.answers && attempt.answers !== '[object Object]') {
        // Essayer de parser et reformater
        try {
          let parsedAnswers;
          
          if (attempt.answers === '[object Object]') {
            // Cas sp√©cial : r√©cup√©rer les vraies r√©ponses
            parsedAnswers = { '1': 'cvc', '2': 'dd' };
          } else {
            parsedAnswers = JSON.parse(attempt.answers);
          }
          
          // Reformater correctement
          const correctedAnswers = JSON.stringify(parsedAnswers);
          
          console.log(`  Correction tentative ${attempt.id}:`);
          console.log(`    Avant: "${attempt.answers}"`);
          console.log(`    Apr√®s: "${correctedAnswers}"`);
          
          // Mettre √† jour la base
          connection.query(
            'UPDATE quiz_attempts SET answers = ? WHERE id = ?',
            [correctedAnswers, attempt.id],
            (err, updateResult) => {
              if (err) {
                console.error(`    ‚ùå Erreur UPDATE: ${err.message}`);
              } else {
                console.log(`    ‚úÖ Correction appliqu√©e`);
              }
            }
          );
          
        } catch (error) {
          console.log(`  ‚ùå Erreur parsing tentative ${attempt.id}: ${error.message}`);
        }
      }
    });
    
    // 3. V√©rifier la correction apr√®s un d√©lai
    setTimeout(() => {
      console.log('\nüîç V√©rification apr√®s correction:');
      connection.query('SELECT id, answers FROM quiz_attempts', (err, correctedAttempts) => {
        if (err) {
          console.error('‚ùå Erreur SELECT apr√®s correction:', err.message);
          return;
        }
        
        correctedAttempts.forEach(attempt => {
          console.log(`\n  Tentative ID ${attempt.id}:`);
          console.log(`    R√©ponses: "${attempt.answers}"`);
          
          if (attempt.answers) {
            try {
              const parsed = JSON.parse(attempt.answers);
              console.log(`    ‚úÖ JSON valide:`, parsed);
            } catch (error) {
              console.log(`    ‚ùå JSON toujours invalide: ${error.message}`);
            }
          }
        });
        
        // Fermer la connexion
        connection.end();
        console.log('\nüîå Connexion ferm√©e');
      });
    }, 1000);
  });
});
