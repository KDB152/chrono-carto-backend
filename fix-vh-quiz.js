const mysql = require('mysql2');

// Connexion √† la base de donn√©es
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '', // Ajoutez votre mot de passe si n√©cessaire
  database: 'chrono_carto'
});

console.log('üîç Connexion √† la base de donn√©es...');

connection.connect((err) => {
  if (err) {
    console.error('‚ùå Erreur de connexion:', err.message);
    return;
  }
  
  console.log('‚úÖ Connexion √©tablie');
  
  // 1. V√©rifier l'√©tat actuel du quiz "VH"
  console.log('\nüîç √âtat actuel du quiz "VH":');
  connection.query('SELECT id, title, target_groups FROM quizzes WHERE id = 2', (err, results) => {
    if (err) {
      console.error('‚ùå Erreur SELECT:', err.message);
      return;
    }
    
    if (results.length > 0) {
      const quiz = results[0];
      console.log(`  Quiz ID ${quiz.id}: "${quiz.title}"`);
      console.log(`  target_groups actuel: "${quiz.target_groups}"`);
      console.log(`  Type: ${typeof quiz.target_groups}`);
      
      // 2. Corriger le target_groups
      console.log('\nüõ†Ô∏è Correction du target_groups...');
      const correctedTargetGroups = JSON.stringify(['1√®re groupe 1']);
      console.log(`  Nouveau target_groups: ${correctedTargetGroups}`);
      
      connection.query(
        'UPDATE quizzes SET target_groups = ? WHERE id = 2',
        [correctedTargetGroups],
        (err, updateResult) => {
          if (err) {
            console.error('‚ùå Erreur UPDATE:', err.message);
            return;
          }
          
          console.log(`‚úÖ Correction appliqu√©e: ${updateResult.affectedRows} ligne(s) modifi√©e(s)`);
          
          // 3. V√©rifier la correction
          console.log('\nüîç V√©rification apr√®s correction:');
          connection.query('SELECT id, title, target_groups FROM quizzes WHERE id = 2', (err, results) => {
            if (err) {
              console.error('‚ùå Erreur SELECT apr√®s correction:', err.message);
              return;
            }
            
            if (results.length > 0) {
              const quiz = results[0];
              console.log(`  Quiz ID ${quiz.id}: "${quiz.title}"`);
              console.log(`  target_groups corrig√©: "${quiz.target_groups}"`);
              
              try {
                const parsed = JSON.parse(quiz.target_groups);
                console.log(`  ‚úÖ JSON valide: ${JSON.stringify(parsed)}`);
                console.log(`  Type: ${Array.isArray(parsed) ? 'Array' : typeof parsed}`);
              } catch (error) {
                console.log(`  ‚ùå JSON toujours invalide: ${error.message}`);
              }
            }
            
            // 4. V√©rifier tous les quizzes
            console.log('\nüîç V√©rification de tous les quizzes:');
            connection.query('SELECT id, title, target_groups FROM quizzes WHERE status = "Publi√©"', (err, allQuizzes) => {
              if (err) {
                console.error('‚ùå Erreur SELECT tous les quizzes:', err.message);
                return;
              }
              
              allQuizzes.forEach(quiz => {
                console.log(`\n  Quiz ID ${quiz.id}: "${quiz.title}"`);
                console.log(`    target_groups: "${quiz.target_groups}"`);
                
                if (quiz.target_groups) {
                  try {
                    const parsed = JSON.parse(quiz.target_groups);
                    console.log(`    ‚úÖ JSON valide: ${JSON.stringify(parsed)}`);
                    console.log(`    Type: ${Array.isArray(parsed) ? 'Array' : typeof parsed}`);
                  } catch (error) {
                    console.log(`    ‚ùå JSON invalide: ${error.message}`);
                  }
                } else {
                  console.log(`    ‚ö™ NULL`);
                }
              });
              
              // Fermer la connexion
              connection.end();
              console.log('\nüîå Connexion ferm√©e');
            });
          });
        }
      );
    } else {
      console.log('‚ùå Quiz "VH" non trouv√©');
      connection.end();
    }
  });
});
