// fix-messaging-system.js
// Script pour diagnostiquer et corriger le syst√®me de messagerie

const mysql = require('mysql2/promise');

const fixMessagingSystem = async () => {
  // Configuration de la base de donn√©es
  const connection = await mysql.createConnection({
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT) || 3306,
    user: process.env.DB_USERNAME || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'chrono_carto',
  });

  try {
    console.log('üîß Diagnostic du syst√®me de messagerie\n');

    // 1. V√©rifier les utilisateurs sp√©cifi√©s
    console.log('1Ô∏è‚É£ V√©rification des utilisateurs 40 et 39...');
    
    const [user40] = await connection.execute(`
      SELECT id, email, first_name, last_name, role, is_approved, is_active, email_verified
      FROM users WHERE id = 40
    `);
    
    const [user39] = await connection.execute(`
      SELECT id, email, first_name, last_name, role, is_approved, is_active, email_verified
      FROM users WHERE id = 39
    `);

    if (user40.length === 0) {
      console.log('‚ùå Utilisateur 40 (mehdielabed86@gmail.com) non trouv√©');
    } else {
      const user = user40[0];
      console.log('‚úÖ Utilisateur 40 trouv√©:', {
        id: user.id,
        email: user.email,
        name: `${user.first_name} ${user.last_name}`,
        role: user.role,
        is_approved: user.is_approved,
        is_active: user.is_active,
        email_verified: user.email_verified
      });
    }

    if (user39.length === 0) {
      console.log('‚ùå Utilisateur 39 (mehdielabed69@gmail.com) non trouv√©');
    } else {
      const user = user39[0];
      console.log('‚úÖ Utilisateur 39 trouv√©:', {
        id: user.id,
        email: user.email,
        name: `${user.first_name} ${user.last_name}`,
        role: user.role,
        is_approved: user.is_approved,
        is_active: user.is_active,
        email_verified: user.email_verified
      });
    }

    // 2. V√©rifier tous les utilisateurs approuv√©s et actifs
    console.log('\n2Ô∏è‚É£ V√©rification de tous les utilisateurs approuv√©s et actifs...');
    
    const [approvedUsers] = await connection.execute(`
      SELECT id, email, first_name, last_name, role, is_approved, is_active, email_verified
      FROM users 
      WHERE is_approved = 1 AND is_active = 1
      ORDER BY id
    `);

    console.log(`‚úÖ ${approvedUsers.length} utilisateurs approuv√©s et actifs trouv√©s:`);
    approvedUsers.forEach(user => {
      console.log(`  - ID: ${user.id}, Email: ${user.email}, Nom: ${user.first_name} ${user.last_name}, R√¥le: ${user.role}`);
    });

    // 3. V√©rifier les tables de messagerie
    console.log('\n3Ô∏è‚É£ V√©rification des tables de messagerie...');
    
    // V√©rifier la table conversations
    const [conversations] = await connection.execute(`
      SELECT id, participant1_id, participant2_id, type, created_at, updated_at
      FROM conversations
      ORDER BY created_at DESC
      LIMIT 10
    `);

    console.log(`‚úÖ ${conversations.length} conversations trouv√©es:`);
    conversations.forEach(conv => {
      console.log(`  - ID: ${conv.id}, Participant1: ${conv.participant1_id}, Participant2: ${conv.participant2_id}, Type: ${conv.type}, Cr√©√©: ${conv.created_at}`);
    });

    // V√©rifier la table messages
    const [messages] = await connection.execute(`
      SELECT id, conversation_id, sender_id, content, message_type, created_at, is_read
      FROM messages
      ORDER BY created_at DESC
      LIMIT 10
    `);

    console.log(`‚úÖ ${messages.length} messages trouv√©s:`);
    messages.forEach(msg => {
      console.log(`  - ID: ${msg.id}, Conversation: ${msg.conversation_id}, Exp√©diteur: ${msg.sender_id}, Type: ${msg.message_type}, Lu: ${msg.is_read}, Cr√©√©: ${msg.created_at}`);
    });

    // 4. V√©rifier les conversations entre utilisateur 40 et 39
    console.log('\n4Ô∏è‚É£ V√©rification des conversations entre utilisateur 40 et 39...');
    
    const [existingConversations] = await connection.execute(`
      SELECT id, participant1_id, participant2_id, type, created_at, updated_at
      FROM conversations
      WHERE (participant1_id = 40 AND participant2_id = 39) 
         OR (participant1_id = 39 AND participant2_id = 40)
    `);

    if (existingConversations.length === 0) {
      console.log('‚ÑπÔ∏è Aucune conversation existante entre utilisateur 40 et 39');
    } else {
      console.log(`‚úÖ ${existingConversations.length} conversation(s) existante(s) entre utilisateur 40 et 39:`);
      existingConversations.forEach(conv => {
        console.log(`  - ID: ${conv.id}, Participant1: ${conv.participant1_id}, Participant2: ${conv.participant2_id}, Type: ${conv.type}, Cr√©√©: ${conv.created_at}`);
      });
    }

    // 5. Diagnostic du probl√®me
    console.log('\n5Ô∏è‚É£ Diagnostic du probl√®me...');
    
    if (user40.length === 0 || user39.length === 0) {
      console.log('‚ùå Probl√®me: Un ou les deux utilisateurs n\'existent pas');
      return;
    }

    const user40Data = user40[0];
    const user39Data = user39[0];

    if (!user40Data.is_approved || !user40Data.is_active) {
      console.log('‚ùå Probl√®me: L\'utilisateur 40 n\'est pas approuv√© ou actif');
    }

    if (!user39Data.is_approved || !user39Data.is_active) {
      console.log('‚ùå Probl√®me: L\'utilisateur 39 n\'est pas approuv√© ou actif');
    }

    // 6. Cr√©er une conversation de test si elle n'existe pas
    if (existingConversations.length === 0) {
      console.log('\n6Ô∏è‚É£ Cr√©ation d\'une conversation de test...');
      
      const [newConversation] = await connection.execute(`
        INSERT INTO conversations (participant1_id, participant2_id, type, created_at, updated_at)
        VALUES (40, 39, 'direct', NOW(), NOW())
      `);
      
      console.log('‚úÖ Conversation de test cr√©√©e');
    }

    // 7. Recommandations
    console.log('\n7Ô∏è‚É£ Recommandations pour corriger le probl√®me:');
    console.log('   - V√©rifier que les utilisateurs sont approuv√©s et actifs');
    console.log('   - V√©rifier que l\'API getAvailableRecipients fonctionne correctement');
    console.log('   - V√©rifier que le frontend envoie les bonnes donn√©es');
    console.log('   - V√©rifier les logs du serveur pour plus de d√©tails');

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  } finally {
    await connection.end();
  }
};

// Ex√©cuter le diagnostic
if (require.main === module) {
  fixMessagingSystem().catch(console.error);
}

module.exports = { fixMessagingSystem };
